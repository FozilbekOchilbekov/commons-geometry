/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 02 22:40:14 GMT 2024
 */

package org.apache.commons.geometry.core.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.core.internal.DoubleFunction1N;
import org.apache.commons.geometry.core.internal.DoubleFunction2N;
import org.apache.commons.geometry.core.internal.DoubleFunction3N;
import org.apache.commons.geometry.core.internal.SimpleTupleFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class SimpleTupleFormat_ESTest extends SimpleTupleFormat_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("expected \"%s\" but found \"%s\"", "", "");
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("N\"A4<BQt`8O-=$;QLd", doubleFunction2N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"N\"A4<BQt`8O-=$;QLd\" at index 0: unable to parse number from string \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("4GB~ d'h4mQ{R", "", "4GB~ d'h4mQ{R");
      DoubleFunction1N<Integer> doubleFunction1N0 = (DoubleFunction1N<Integer>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("4GB~ d'h4mQ{R", doubleFunction1N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"4GB~ d'h4mQ{R\" at index 0: unable to parse number from string \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction3N<Object> doubleFunction3N0 = (DoubleFunction3N<Object>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction3N0).apply(anyDouble() , anyDouble() , anyDouble());
      Object object0 = simpleTupleFormat0.parse("(-2127.66, 1218.640067871802, 0.0)", doubleFunction3N0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction2N0).apply(anyDouble() , anyDouble());
      Object object0 = simpleTupleFormat0.parse("(1.0, 891.0479009766701)", doubleFunction2N0);
      assertNull(object0);
      assertSame(object0, simpleTupleFormat0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("_#Sd)", "_#Sd)");
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction1N0).apply(anyDouble());
      Object object0 = simpleTupleFormat0.parse("_#Sd)0.0_#Sd)", doubleFunction1N0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("_#Sd)", "_#Sd)");
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(doubleFunction1N0).apply(anyDouble());
      Object object0 = simpleTupleFormat0.parse("_#Sd)9.939034890528431_#Sd)", doubleFunction1N0);
      //  // Unstable assertion: assertEquals("_#Sd)9.939034890528431_#Sd)", object0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      String string0 = simpleTupleFormat0.getSuffix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", "");
      String string0 = simpleTupleFormat0.getSuffix();
      assertEquals("", string0);
      assertEquals("", simpleTupleFormat0.getPrefix());
      assertEquals(",", simpleTupleFormat0.getSeparator());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, "org.apache.commons.geometry.core.internal.SimpleTupleFormat", (String) null);
      String string0 = simpleTupleFormat0.getSeparator();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", ".M5Mc|", "");
      String string0 = simpleTupleFormat0.getSeparator();
      assertEquals(".M5Mc|", simpleTupleFormat0.getPrefix());
      assertEquals("", string0);
      assertEquals("", simpleTupleFormat0.getSuffix());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.getPrefix();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", "");
      String string0 = simpleTupleFormat0.getPrefix();
      assertEquals(",", simpleTupleFormat0.getSeparator());
      assertEquals("", simpleTupleFormat0.getSuffix());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse((String) null, (DoubleFunction3N<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction2N<Object> doubleFunction2N0 = (DoubleFunction2N<Object>) mock(DoubleFunction2N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("(-397.2, 564.981083983839, 0.0)", doubleFunction2N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"(-397.2, 564.981083983839, 0.0)\" at index 27: expected \")\" but found \"0\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("(0.0, 0.0)", (DoubleFunction2N<Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse((String) null, (DoubleFunction1N<Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      DoubleFunction3N<Object> doubleFunction3N0 = (DoubleFunction3N<Object>) mock(DoubleFunction3N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse(" !", doubleFunction3N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \" !\" at index 1: expected \"(\" but found \"!\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("J0=,AwH", (String) null);
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("J0=,AwH1.0, 1.0, 1.0, 1.0", doubleFunction1N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"J0=,AwH1.0, 1.0, 1.0, 1.0\" at index 12: unexpected content
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      DoubleFunction1N<Object> doubleFunction1N0 = (DoubleFunction1N<Object>) mock(DoubleFunction1N.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("", doubleFunction1N0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"\" at index 0: unable to parse number from string \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", "");
      String string0 = simpleTupleFormat0.format(1543.4, 1543.4, 1.0, 2917.77530121);
      assertEquals("1543.4, 1543.4, 1.0, 2917.77530121", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null);
      String string0 = simpleTupleFormat0.format(1.0, 0.0, 1.0, 2040.2651);
      assertEquals("1.0, 0.0, 1.0, 2040.2651", string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, "", (String) null);
      String string0 = simpleTupleFormat0.format(0.0, 0.0, (-1.0));
      assertEquals("0.0null 0.0null -1.0", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.format((-2127.66), 1218.640067871802, 0.0);
      assertEquals("(-2127.66, 1218.640067871802, 0.0)", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, "unexpected content");
      String string0 = simpleTupleFormat0.format((-3267.1654), (-3267.1654), (-3267.1654));
      assertEquals("-3267.1654, -3267.1654, -3267.1654unexpected content", string0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("org.apache.commons.geometry.core.internal.SimpleTupleFormat", (String) null);
      String string0 = simpleTupleFormat0.format(1.0, 1.0);
      assertEquals("org.apache.commons.geometry.core.internal.SimpleTupleFormat1.0, 1.0", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.format(1.0, 891.0479009766701);
      assertEquals("(1.0, 891.0479009766701)", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, "org.apache.commons.geometry.core.internal.SimpleTupleFormat");
      String string0 = simpleTupleFormat0.format(1.0, 1.0);
      assertEquals("1.0null 1.0org.apache.commons.geometry.core.internal.SimpleTupleFormat", string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("", "");
      String string0 = simpleTupleFormat0.format((-1636.3506044334067));
      assertEquals(",", simpleTupleFormat0.getSeparator());
      assertEquals("-1636.3506044334067", string0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat((String) null, (String) null, (String) null);
      String string0 = simpleTupleFormat0.format(0.0);
      assertEquals("0.0", string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.getSeparator();
      assertEquals(",", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      // Undeclared exception!
      try { 
        simpleTupleFormat0.parse("", (DoubleFunction1N<Integer>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Failed to parse string \"\" at index 0: expected \"(\" but found \"\"
         //
         verifyException("org.apache.commons.geometry.core.internal.SimpleTupleFormat", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = SimpleTupleFormat.getDefault();
      String string0 = simpleTupleFormat0.getSuffix();
      assertEquals(")", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleTupleFormat simpleTupleFormat0 = new SimpleTupleFormat("`G", "");
      String string0 = simpleTupleFormat0.getPrefix();
      assertEquals("`G", string0);
      assertEquals("", simpleTupleFormat0.getSuffix());
      assertEquals(",", simpleTupleFormat0.getSeparator());
  }
}
