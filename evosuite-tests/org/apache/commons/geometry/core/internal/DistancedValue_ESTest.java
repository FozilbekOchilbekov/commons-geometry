/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 02 22:34:20 GMT 2024
 */

package org.apache.commons.geometry.core.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.Comparator;
import org.apache.commons.geometry.core.internal.DistancedValue;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class DistancedValue_ESTest extends DistancedValue_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      DistancedValue<Object> distancedValue0 = DistancedValue.of((Object) null, (-1606.1));
      distancedValue0.getValue();
      assertEquals((-1606.1), distancedValue0.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Integer integer0 = new Integer(1695);
      DistancedValue<Object> distancedValue0 = DistancedValue.of((Object) integer0, 0.0);
      DistancedValue<Object> distancedValue1 = DistancedValue.of((Object) distancedValue0, 1.0);
      DistancedValue distancedValue2 = (DistancedValue)distancedValue1.getValue();
      assertEquals(0.0, distancedValue2.getDistance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Integer integer0 = new Integer(0);
      DistancedValue<Integer> distancedValue0 = DistancedValue.of(integer0, 0.0);
      double double0 = distancedValue0.getDistance();
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      DistancedValue<Object> distancedValue0 = DistancedValue.of((Object) null, (-1606.1));
      double double0 = distancedValue0.getDistance();
      assertEquals((-1606.1), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Comparator<DistancedValue<Object>> comparator0 = DistancedValue.descendingDistance();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Comparator<DistancedValue<Object>> comparator0 = DistancedValue.ascendingDistance();
      assertNotNull(comparator0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      DistancedValue<Integer> distancedValue0 = DistancedValue.of((Integer) null, 1.0);
      double double0 = distancedValue0.getDistance();
      assertEquals(1.0, double0, 0.01);
  }
}
