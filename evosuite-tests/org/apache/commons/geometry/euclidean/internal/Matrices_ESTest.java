/*
 * This file was automatically generated by EvoSuite
 * Fri Feb 02 23:32:14 GMT 2024
 */

package org.apache.commons.geometry.euclidean.internal;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.apache.commons.geometry.euclidean.internal.Matrices;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Matrices_ESTest extends Matrices_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      double double0 = Matrices.determinant((-1229.814948423115), (-1229.814948423115), (-1229.814948423115), (-1229.814948423115), (-1229.814948423115), (-1229.814948423115), (-1229.814948423115), (-1229.814948423115), (-1229.814948423115));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      double double0 = Matrices.determinant(0.0, 2048.79, 0.0, 0.0, (-1149.133956), 0.0, 0.0, 2048.79, 927.438);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      double double0 = Matrices.determinant((-2573.4449), 0.0, (-2971.676), (-1.0), 0.0, (-1549.4), (-3511.1681), 1.0, 0.0);
      assertEquals((-3984323.8520600004), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      double double0 = Matrices.determinant((-3084.6659239617), (-3084.6659239617), (-3084.6659239617), (-3084.6659239617));
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      double double0 = Matrices.determinant((-1549.4), 1665.623, (-4936.969077762809), (-2971.676));
      assertEquals(1.2827444040610524E7, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse(0.0);
      assertEquals(0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse((-1.0));
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      double double0 = Matrices.checkDeterminantForInverse(1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      double double0 = Matrices.checkElementForInverse(496.7099030339);
      assertEquals(496.7099030339, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      double double0 = Matrices.checkDeterminantForInverse((-2686.615896779814));
      assertEquals((-2686.615896779814), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      double double0 = Matrices.determinant((-2258.9229369417), 0.0, (-2798264.318370663), 1.0, (-3816.7083051), (-1.0), (-2686.615896779814), (-2258.9229369417), 496.7099030339);
      assertEquals(2.870409267135762E13, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double double0 = Matrices.determinant((-1.0), (-2686.615896779814), (-1042.55726977), (-2686.615896779814));
      assertEquals((-2798264.318370663), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      // Undeclared exception!
      try { 
        Matrices.checkDeterminantForInverse(0.0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Matrix is not invertible; matrix determinant is 0.0
         //
         verifyException("org.apache.commons.geometry.euclidean.internal.Matrices", e);
      }
  }
}
